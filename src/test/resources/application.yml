# 自定义业务配置项
biz:
  app:
    # 应用编码（全大写、首字母大写或带数字，如：CMDB、Automation、APP360、VideoMon）
    code: rs-ssoLogin
    lower-code: rs-ssoLogin
    # 英文描述信息
    description: demo app
    # 中文描述信息
    descriptionCn: 基于Springboot&Dubbo的示例程序
    auth-codes:
      - code: task_assign
        name: Task assignment
        nameCN: 任务分配
    security:
      # 是否跳过openApi apikey效验, third-consumer-spring-boot-starter ,own-consumer-spring-boot-starter 都会生效
      enabled: false
      # 提供访问apikey 供sdk调用租户openApi使用,使用third-consumer-spring-boot-starter 产品权限注册组件需要提供，该组件使用openApi方式进行权限，
      # 产品信息注册，顾需要提供apikey, 应用本身提供给外部调用无需提供apiKey.
      api-key: e10adc3949ba59abbe56e057f2gg88dd
      # 需要验证登录的地址
      validation-path: /rs-ssoLogin/frontapi/v1/**
      #不需要验证登录地址
      ineffectiveness-path: /, /static/**, /tenant/**, /frontend/**, /actuator/**, /h2/**, /actuator/health, /favicon.ico,/test/hello

  module:
    # 模块编码（全部小写，单模块应用为 应用编码小写-main ）
    code: ${biz.app.lower-code}-main
    # 模块中文名称
    name: 样例主模块
    description: ${lowerCode}主模块
    main-class: com.uyun.rs.StartApplication
    # 版本信息（以“.”分割四位数字组成）
    version: 2.0.15.0
    # 当前支持 [main, compute, normal] 三个枚举值
    # main：产品主模块，运维管理平台将以此模块作为安装切点进行依赖分析并完成所在产品的安装，每个产品只有一个main模块，一般为nginx或web前端
    # compute：计算模块
    # normal：常规模块
    # 单模块默认为 main
    type: main
    # 是否支持扩容，默认为true（可选）
    scalable: true
    # 是否需要Platform Nginx进行方向代理或负载均衡，
    # 可选项，如果需要进行代理，请按如下方式进行配置。
    enable_reverse_proxy:
      upstream: |
        upstream ${biz.app.lower-code} {
        <#list hosts as host>
          # 在此处追加对应Server配置，修改API接口
          server ${host.ip}:${server.port};
        </#list>
          check interval=3000 rise=2 fall=3 timeout=3000;
        }
        upstream ${biz.app.lower-code}-api {
        <#list hosts as host>
          # 在此处追加对应Server配置，修改API接口
          server ${host.ip}:${server.port};
        </#list>
        }
      location: |
        location /${biz.app.lower-code}/ {
          proxy_pass http://${biz.app.lower-code}/;
        }
        location /${biz.app.lower-code}/frontapi/v1 {
          proxy_pass http://${biz.app.lower-code}-api;
        }
        location /${biz.app.lower-code}/openapi/v1 {
          proxy_pass http://${biz.app.lower-code}-api;
        }
    # 需要关闭的防火墙端口
    firewall_port: ${server.port},${dubbo.protocol.port}
    # 数据库账户
    database:
      account:
        - type: mysql
          schema: ${biz.app.lower-code}
          username: ${biz.app.lower-code}
    # 依赖信息，该应用依赖的其他模块，包括DB、中间件等（可为空）
    dependencies:
      - module: platform-jdk
        version: 2.0.0.0
      - module: platform-mysql
        version: 2.0.0.0
      - module: platform-apollo-adminservice
        version: 2.0.0.0
      - module: platform-apollo-portal
        version: 2.0.0.0
# Spring 公共配置
spring:
  application:
    name: ${biz.module.code}
  profiles:
    active: dev
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    maxActive: 20
    initialSize: 1
    maxWait: 60000
    minIdle: 1
    minEvictableIdleTimeMillis: 300000
    validationQuery: select 'x'
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    poolPreparedStatements: true
    maxOpenPreparedStatements: 20
  resources:
    static-locations: file:../static/
  mvc:
    throw-exception-if-no-handler-found: true
  servlet:
    multipart:
      max-file-size: -1
      max-request-size: -1
  # jpa相关配置
  jpa:
    show-sql: true
    hibernate:
      # 启动时自动根据实体类创建table，如存在则作更新处理
      ddl-auto: update
      # 采用Hibernate命名策略
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
  #合并基线
  flyway:
    baseline-on-migrate: true

server:
  port: 6606

management:
  endpoints:
    web:
      exposure:
        include: "*"

#配置默认命名，空间
whale:
  distributed:
    config:
      app:
        id: ${biz.app.lower-code}
      server:
        url: http://10.1.58.228:7546
      namespaces: common.properties,${biz.module.code}-config.yml
      bootstrap:
        enabled: true
        eagerLoad:
          enabled: true

# Dubbo相关配置
dubbo:
  application:
    name: ${biz.module.code}
  registry:
    check: false
    timeout: 30000
  protocol:
    # 指定通信协议
    name: dubbo
    # 通信端口，这里指的是与消费者间的通信协议与端口
    port: 16606
  provider:
    # 配置全局调用服务超时时间
    timeout: 30000
    # 重试3次
    retries: 3
    delay: -1
  consumer:
    check: false
    timeout: 3000